#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "votes" "proposal" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.algo.ts:5
    // proposal = GlobalState<string>({ key: "proposal", initialValue: "" });
    bytec_1 // "proposal"
    pushbytes ""
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:8
    // votes = GlobalState<uint64>({ key: "votes", initialValue: 0 });
    bytec_0 // "votes"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class Voting extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x386cd372 0xd8fd68a0 0x2ae69a46 // method "createProposal(string)string", method "castVote()uint64", method "getResult()(string,uint64)"
    txna ApplicationArgs 0
    match main_createProposal_route@5 main_castVote_route@6 main_getResult_route@7

main_after_if_else@14:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class Voting extends Contract {
    intc_0 // 0
    return

main_getResult_route@7:
    // smart_contracts/hello_world/contract.algo.ts:24
    // getResult(): [string, uint64] {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getResult
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    itob
    pushbytes 0x000a
    swap
    concat
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_castVote_route@6:
    // smart_contracts/hello_world/contract.algo.ts:18
    // castVote(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub castVote
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_createProposal_route@5:
    // smart_contracts/hello_world/contract.algo.ts:11
    // createProposal(title: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class Voting extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/hello_world/contract.algo.ts:11
    // createProposal(title: string): string {
    callsub createProposal
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@10:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class Voting extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/hello_world/contract.algo.ts::Voting.createProposal(title: bytes) -> bytes:
createProposal:
    // smart_contracts/hello_world/contract.algo.ts:11
    // createProposal(title: string): string {
    proto 1 1
    // smart_contracts/hello_world/contract.algo.ts:5
    // proposal = GlobalState<string>({ key: "proposal", initialValue: "" });
    bytec_1 // "proposal"
    // smart_contracts/hello_world/contract.algo.ts:12
    // this.proposal.value = title;
    frame_dig -1
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:8
    // votes = GlobalState<uint64>({ key: "votes", initialValue: 0 });
    bytec_0 // "votes"
    // smart_contracts/hello_world/contract.algo.ts:13
    // this.votes.value = 0; // reset votes when new proposal is made
    intc_0 // 0
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:5
    // proposal = GlobalState<string>({ key: "proposal", initialValue: "" });
    intc_0 // 0
    bytec_1 // "proposal"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:14
    // return this.proposal.value;
    retsub


// smart_contracts/hello_world/contract.algo.ts::Voting.castVote() -> uint64:
castVote:
    // smart_contracts/hello_world/contract.algo.ts:8
    // votes = GlobalState<uint64>({ key: "votes", initialValue: 0 });
    intc_0 // 0
    bytec_0 // "votes"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:19
    // this.votes.value = this.votes.value + 1;
    intc_1 // 1
    +
    // smart_contracts/hello_world/contract.algo.ts:8
    // votes = GlobalState<uint64>({ key: "votes", initialValue: 0 });
    bytec_0 // "votes"
    // smart_contracts/hello_world/contract.algo.ts:19
    // this.votes.value = this.votes.value + 1;
    swap
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:8
    // votes = GlobalState<uint64>({ key: "votes", initialValue: 0 });
    intc_0 // 0
    bytec_0 // "votes"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:20
    // return this.votes.value;
    retsub


// smart_contracts/hello_world/contract.algo.ts::Voting.getResult() -> bytes, uint64:
getResult:
    // smart_contracts/hello_world/contract.algo.ts:5
    // proposal = GlobalState<string>({ key: "proposal", initialValue: "" });
    intc_0 // 0
    bytec_1 // "proposal"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:8
    // votes = GlobalState<uint64>({ key: "votes", initialValue: 0 });
    intc_0 // 0
    bytec_0 // "votes"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:25
    // return [this.proposal.value, this.votes.value];
    retsub
